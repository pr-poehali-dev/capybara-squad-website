import { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import Icon from "@/components/ui/icon";

interface HikeRule {
  id: string;
  name: string;
  description: string;
  correctWords: string[];
  theme: string;
}

const hikeRules: HikeRule[] = [
  {
    id: "1",
    name: "–í–æ–¥–Ω—ã–π –ø–æ—Ö–æ–¥",
    description:
      "–ö–∞–ø–∏–±–∞—Ä—ã –∏–¥—É—Ç –∫ –æ–∑–µ—Ä—É. –ú–æ–∂–Ω–æ –±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –≤–æ–¥–æ–π!",
    correctWords: ["–≤–æ–¥–∞", "–ø–æ–ª–æ—Ç–µ–Ω—Ü–µ", "–∫—É–ø–∞–ª—å–Ω–∏–∫", "–æ—á–∫–∏", "–∫—Ä–µ–º", "–∑–æ–Ω—Ç"],
    theme: "water",
  },
  {
    id: "2",
    name: "–õ–µ—Å–Ω–æ–π –ø–æ—Ö–æ–¥",
    description:
      "–û—Ç—Ä—è–¥ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –≥—É—Å—Ç–æ–π –ª–µ—Å. –ë–µ—Ä–∏—Ç–µ —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ–µ –¥–ª—è –ª–µ—Å–∞!",
    correctWords: ["–ø–∞–ª–∞—Ç–∫–∞", "—Å–ø–∏—á–∫–∏", "–Ω–æ–∂", "–∫–æ–º–ø–∞—Å", "—Ñ–æ–Ω–∞—Ä–∏–∫", "–≤–µ—Ä–µ–≤–∫–∞"],
    theme: "forest",
  },
  {
    id: "3",
    name: "–ì–æ—Ä–Ω—ã–π –ø–æ—Ö–æ–¥",
    description: "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –Ω–∞ –≥–æ—Ä—É! –ù—É–∂–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–µ—â–∏ –¥–ª—è –∞–ª—å–ø–∏–Ω–∏–∑–º–∞.",
    correctWords: [
      "–≤–µ—Ä–µ–≤–∫–∞",
      "–∫—Ä—é—á–∫–∏",
      "–∫–∞—Å–∫–∞",
      "–∫–∞—Ä–∞–±–∏–Ω—ã",
      "–±–æ—Ç–∏–Ω–∫–∏",
      "–ø–µ—Ä—á–∞—Ç–∫–∏",
    ],
    theme: "mountain",
  },
];

export default function HikingGame() {
  const [selectedHike, setSelectedHike] = useState<HikeRule | null>(null);
  const [playerInput, setPlayerInput] = useState("");
  const [gameResult, setGameResult] = useState<"none" | "success" | "fail">(
    "none",
  );
  const [resultMessage, setResultMessage] = useState("");

  const checkAnswer = () => {
    if (!selectedHike || !playerInput.trim()) return;

    const input = playerInput.toLowerCase().trim();
    const isCorrect = selectedHike.correctWords.some(
      (word) =>
        word.toLowerCase().includes(input) ||
        input.includes(word.toLowerCase()),
    );

    if (isCorrect) {
      setGameResult("success");
      setResultMessage(
        `üéâ –û—Ç–ª–∏—á–Ω–æ! "${playerInput}" –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è ${selectedHike.name.toLowerCase()}–∞! –ö–∞–ø–∏–±–∞—Ä—ã –±–µ—Ä—É—Ç —Ç–µ–±—è –≤ –ø–æ—Ö–æ–¥!`,
      );
    } else {
      setGameResult("fail");
      setResultMessage(
        `üòî "${playerInput}" –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ö–æ–¥–∞. –ö–∞–ø–∏–±–∞—Ä—ã –æ—Å—Ç–∞–≤–ª—è—é—Ç —Ç–µ–±—è –¥–æ–º–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!`,
      );
    }
  };

  const resetGame = () => {
    setSelectedHike(null);
    setPlayerInput("");
    setGameResult("none");
    setResultMessage("");
  };

  const generateCustomHike = () => {
    const customThemes = ["–∫–æ—Å–º–∏—á–µ—Å–∫–∏–π", "–ø–æ–¥–≤–æ–¥–Ω—ã–π", "–∑–∏–º–Ω–∏–π", "–ø—É—Å—Ç—ã–Ω–Ω—ã–π"];
    const randomTheme =
      customThemes[Math.floor(Math.random() * customThemes.length)];

    const customHike: HikeRule = {
      id: "custom",
      name: `${randomTheme.charAt(0).toUpperCase() + randomTheme.slice(1)} –ø–æ—Ö–æ–¥`,
      description: `–û—Å–æ–±–µ–Ω–Ω—ã–π ${randomTheme} –ø–æ—Ö–æ–¥! –ü—Ä–∏–¥—É–º–∞–π, —á—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π.`,
      correctWords: ["–µ–¥–∞", "–≤–æ–¥–∞", "–æ–¥–µ–∂–¥–∞", "–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", "–∑–∞—â–∏—Ç–∞"],
      theme: "custom",
    };

    setSelectedHike(customHike);
    setGameResult("none");
    setResultMessage("");
  };

  return (
    <div className="w-full max-w-4xl mx-auto p-6">
      <Card className="mb-6 bg-gradient-to-r from-water-green to-electric-yellow">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl flex items-center justify-center gap-2">
            <Icon name="Backpack" size={28} />
            –ò–≥—Ä–∞ "–ü–æ—Ö–æ–¥ —Å –ö–∞–ø–∏–±–∞—Ä–∞–º–∏"
          </CardTitle>
          <p className="text-muted-foreground">
            –í—ã–±–µ—Ä–∏ –ø–æ—Ö–æ–¥ –∏ —Å–∫–∞–∂–∏, —á—Ç–æ –≤–æ–∑—å–º—ë—à—å —Å —Å–æ–±–æ–π. –ö–∞–ø–∏–±–∞—Ä—ã —Ä–µ—à–∞—Ç, –±—Ä–∞—Ç—å –ª–∏
            —Ç–µ–±—è!
          </p>
        </CardHeader>
      </Card>

      {!selectedHike ? (
        <div className="space-y-4">
          <h3 className="text-xl font-semibold text-center mb-4">
            –í—ã–±–µ—Ä–∏ —Ç–∏–ø –ø–æ—Ö–æ–¥–∞:
          </h3>

          <div className="grid gap-4 md:grid-cols-3">
            {hikeRules.map((hike) => (
              <Card
                key={hike.id}
                className="cursor-pointer hover:shadow-lg transition-all hover:scale-105"
                onClick={() => setSelectedHike(hike)}
              >
                <CardHeader className="text-center">
                  <div className="text-4xl mb-2">
                    {hike.theme === "water" && "üèä‚Äç‚ôÇÔ∏è"}
                    {hike.theme === "forest" && "üå≤"}
                    {hike.theme === "mountain" && "‚õ∞Ô∏è"}
                  </div>
                  <CardTitle className="text-lg">{hike.name}</CardTitle>
                </CardHeader>
                <CardContent>
                  <p className="text-sm text-muted-foreground">
                    {hike.description}
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>

          <div className="text-center mt-6">
            <Button
              onClick={generateCustomHike}
              variant="outline"
              className="bg-gradient-to-r from-purple-100 to-pink-100"
            >
              <Icon name="Shuffle" size={16} className="mr-2" />
              –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ö–æ–¥
            </Button>
          </div>
        </div>
      ) : (
        <div className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                {selectedHike.theme === "water" && "üèä‚Äç‚ôÇÔ∏è"}
                {selectedHike.theme === "forest" && "üå≤"}
                {selectedHike.theme === "mountain" && "‚õ∞Ô∏è"}
                {selectedHike.theme === "custom" && "‚ú®"}
                {selectedHike.name}
              </CardTitle>
              <p className="text-muted-foreground">
                {selectedHike.description}
              </p>
            </CardHeader>
          </Card>

          <Card>
            <CardContent className="pt-6">
              <div className="space-y-4">
                <label className="text-sm font-medium">
                  –ß—Ç–æ —Ç—ã –≤–æ–∑—å–º—ë—à—å —Å —Å–æ–±–æ–π –≤ –ø–æ—Ö–æ–¥?
                </label>
                <div className="flex gap-2">
                  <Input
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ø–∞–ª–∞—Ç–∫–∞, –≤–æ–¥–∞, —Ñ–æ–Ω–∞—Ä–∏–∫..."
                    value={playerInput}
                    onChange={(e) => setPlayerInput(e.target.value)}
                    onKeyPress={(e) => e.key === "Enter" && checkAnswer()}
                    disabled={gameResult !== "none"}
                  />
                  <Button
                    onClick={checkAnswer}
                    disabled={!playerInput.trim() || gameResult !== "none"}
                  >
                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>

          {gameResult !== "none" && (
            <Card
              className={`${
                gameResult === "success"
                  ? "bg-green-50 border-green-200"
                  : "bg-red-50 border-red-200"
              }`}
            >
              <CardContent className="pt-6">
                <div className="text-center space-y-4">
                  <p className="text-lg">{resultMessage}</p>
                  <div className="flex gap-2 justify-center">
                    <Button onClick={resetGame} variant="outline">
                      <Icon name="RotateCcw" size={16} className="mr-2" />
                      –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –ø–æ—Ö–æ–¥
                    </Button>
                    <Button
                      onClick={() => {
                        setPlayerInput("");
                        setGameResult("none");
                        setResultMessage("");
                      }}
                      variant="default"
                    >
                      <Icon name="RefreshCw" size={16} className="mr-2" />
                      –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          )}

          {selectedHike.id !== "custom" && (
            <Card className="bg-blue-50">
              <CardContent className="pt-6">
                <div className="text-center">
                  <p className="text-sm text-muted-foreground mb-2">
                    –ü–æ–¥—Å–∫–∞–∑–∫–∞ - –ø—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:
                  </p>
                  <div className="flex flex-wrap gap-1 justify-center">
                    {selectedHike.correctWords.map((word) => (
                      <Badge key={word} variant="secondary" className="text-xs">
                        {word}
                      </Badge>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </div>
      )}
    </div>
  );
}
